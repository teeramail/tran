import { resolve, join, isAbsolute } from 'pathe';
import { logger, isIgnored } from '@nuxt/kit';
import { findExports, sanitizeFilePath } from 'mlly';
import { joinURL, withoutLeadingSlash, withTrailingSlash } from 'ufo';
import { i as isCSS, p as prepareManifests, h as hashId, u as uniq, g as generateDevSSRManifest, d as distDir, a as pkgDir } from '../shared/bridge-edge.74947122.mjs';
import createVuePlugin from '@vitejs/plugin-vue2';
import { getPort } from 'get-port-please';
import { defineEventHandler } from 'h3';
import defu, { defu as defu$1 } from 'defu';
import require$$0 from '@vitejs/plugin-legacy';
import fse from 'fs-extra';
import { debounce } from 'perfect-debounce';
import { pathToFileURL } from 'url';
import { existsSync } from 'fs';
import { builtinModules } from 'module';
import { ExternalsDefaults, isExternal as isExternal$1 } from 'externality';
import { genObjectFromRawEntries, genDynamicImport } from 'knitwork';
import MagicString from 'magic-string';
import createResolver from 'postcss-import-resolver';
import 'node-fetch';
import 'nitropack';
import 'vue-bundle-renderer';
import 'path';
import 'untyped';
import 'unplugin';
import 'crypto';
import 'acorn';
import 'estree-walker';
import 'util';
import 'enhanced-resolve';
import 'unimport';
import 'scule';
import 'escape-string-regexp';

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

// CommonJS proxy to bypass jiti transforms from nuxt 2
// eslint-disable-next-line jsdoc/valid-types
/** @type {typeof import('vite')} */
var stubVite = {
  mergeConfig: function (...args) {
    return import('vite').then(m => m.mergeConfig.call(this, ...args))
  },
  createServer: function (...args) {
    return import('vite').then(m => m.createServer.call(this, ...args))
  },
  build: function (...args) {
    return import('vite').then(m => m.build.call(this, ...args))
  }
};

async function warmupViteServer(server, entries) {
  const warmedUrls = /* @__PURE__ */ new Set();
  const warmup = async (url) => {
    if (warmedUrls.has(url)) {
      return;
    }
    warmedUrls.add(url);
    try {
      await server.transformRequest(url);
    } catch (e) {
      logger.debug("Warmup for %s failed with: %s", url, e);
    }
    const mod = await server.moduleGraph.getModuleByUrl(url);
    const deps = Array.from(mod?.importedModules || []);
    await Promise.all(deps.map((m) => warmup(m.url.replace("/@id/__x00__", "\0"))));
  };
  await Promise.all(entries.map((entry) => warmup(entry)));
}

var stubLegacyExports = {};
var stubLegacy = {
  get exports(){ return stubLegacyExports; },
  set exports(v){ stubLegacyExports = v; },
};

(function (module) {
	// CommonJS proxy to bypass jiti transforms from nuxt 2
	/** @type {typeof import('@vitejs/plugin-legacy')['default'] } */
	module.exports = require$$0;
} (stubLegacy));

const PluginLegacy = /*@__PURE__*/getDefaultExportFromCjs(stubLegacyExports);

function devStyleSSRPlugin(options) {
  return {
    name: "nuxt:dev-style-ssr",
    apply: "serve",
    enforce: "post",
    transform(code, id) {
      if (!isCSS(id) || !code.includes("import.meta.hot")) {
        return;
      }
      let moduleId = id;
      if (moduleId.startsWith(options.srcDir)) {
        moduleId = moduleId.slice(options.srcDir.length);
      }
      const selector = joinURL(options.buildAssetsURL, moduleId);
      return code + `
document.querySelectorAll(\`link[href="${selector}"]\`).forEach(i=>i.remove())`;
    }
  };
}

const needsJsxProcessing = (id = "") => !id.includes("node_modules") && [".vue", ".jsx", ".tsx"].some((extension) => id.includes(extension));
function jsxPlugin() {
  return {
    name: "nuxt:jsx",
    transform(code, id) {
      if (!needsJsxProcessing(id)) {
        return null;
      }
      return {
        code: code.replace(/render\s*\(\s*\)\s*\{/g, "render(h){"),
        map: null
      };
    }
  };
}

async function buildClient(ctx) {
  const alias = {
    "#internal/nitro": resolve(ctx.nuxt.options.buildDir, "nitro.client.mjs")
  };
  for (const p of ctx.builder.plugins) {
    alias[p.name] = p.mode === "server" ? `defaultexport:${resolve(ctx.nuxt.options.buildDir, "empty.js")}` : `defaultexport:${p.src}`;
  }
  const clientConfig = await stubVite.mergeConfig(ctx.config, {
    base: ctx.nuxt.options.dev ? joinURL(ctx.nuxt.options.app.baseURL.replace(/^\.\//, "/") || "/", ctx.nuxt.options.app.buildAssetsDir) : "./",
    experimental: {
      renderBuiltUrl: (filename, { type, hostType }) => {
        if (hostType !== "js" || type === "asset") {
          return { relative: true };
        }
        return { runtime: `globalThis.__publicAssetsURL(${JSON.stringify(filename)})` };
      }
    },
    define: {
      "process.client": true,
      "process.server": false,
      "process.static": false,
      "module.hot": false
    },
    cacheDir: resolve(ctx.nuxt.options.rootDir, "node_modules/.cache/vite/client"),
    resolve: {
      alias,
      dedupe: ["vue"]
    },
    build: {
      rollupOptions: {
        input: resolve(ctx.nuxt.options.buildDir, "client.js")
      },
      manifest: true,
      outDir: resolve(ctx.nuxt.options.buildDir, "dist/client")
    },
    plugins: [
      jsxPlugin(),
      createVuePlugin(ctx.config.vue),
      PluginLegacy(),
      devStyleSSRPlugin({
        srcDir: ctx.nuxt.options.srcDir,
        buildAssetsURL: joinURL(ctx.nuxt.options.app.baseURL, ctx.nuxt.options.app.buildAssetsDir)
      })
    ],
    appType: "custom",
    server: {
      middlewareMode: true
    }
  });
  if (!ctx.nuxt.options.dev) {
    clientConfig.server.hmr = false;
  }
  if (clientConfig.server && clientConfig.server.hmr !== false) {
    const hmrPortDefault = 24678;
    const hmrPort = await getPort({
      port: hmrPortDefault,
      ports: Array.from({ length: 20 }, (_, i) => hmrPortDefault + 1 + i)
    });
    clientConfig.server = defu(clientConfig.server, {
      https: ctx.nuxt.options.server.https,
      hmr: {
        protocol: ctx.nuxt.options.server.https ? "wss" : "ws",
        port: hmrPort
      }
    });
  }
  ctx.config.build.rollupOptions = defu(ctx.config.build.rollupOptions, {
    output: {
      // https://github.com/vitejs/vite/tree/main/packages/vite/src/node/build.ts#L464-L478
      assetFileNames: ctx.nuxt.options.dev ? void 0 : withoutLeadingSlash(join(ctx.nuxt.options.app.buildAssetsDir, "[name].[hash].[ext]")),
      chunkFileNames: ctx.nuxt.options.dev ? void 0 : withoutLeadingSlash(join(ctx.nuxt.options.app.buildAssetsDir, "[name].[hash].js")),
      entryFileNames: ctx.nuxt.options.dev ? "entry.js" : withoutLeadingSlash(join(ctx.nuxt.options.app.buildAssetsDir, "[name].[hash].js"))
    }
  });
  await ctx.nuxt.callHook("vite:extendConfig", clientConfig, { isClient: true, isServer: false });
  if (ctx.nuxt.options.dev) {
    const viteServer = await stubVite.createServer(clientConfig);
    ctx.clientServer = viteServer;
    await ctx.nuxt.callHook("vite:serverCreated", viteServer, { isClient: true, isServer: false });
    const transformHandler = viteServer.middlewares.stack.findIndex((m) => m.handle instanceof Function && m.handle.name === "viteTransformMiddleware");
    viteServer.middlewares.stack.splice(transformHandler, 0, {
      route: "",
      handle: (req, res, next) => {
        if (req._skip_transform) {
          req.url = joinURL("/__skip_vite", req.url);
        }
        next();
      }
    });
    const viteMiddleware = defineEventHandler(async (event) => {
      const originalURL = event.node.req.url;
      const viteRoutes = viteServer.middlewares.stack.map((m) => m.route).filter((r) => r.length > 1);
      if (!originalURL.startsWith(clientConfig.base) && !viteRoutes.some((route) => originalURL.startsWith(route))) {
        event.node.req._skip_transform = true;
      }
      await new Promise((resolve2, reject) => {
        viteServer.middlewares.handle(event.node.req, event.node.res, (err) => {
          event.node.req.url = originalURL;
          return err ? reject(err) : resolve2(null);
        });
      });
    });
    await ctx.nuxt.callHook("server:devHandler", viteMiddleware);
    ctx.nuxt.hook("close", async () => {
      await viteServer.close();
    });
  } else {
    const start = Date.now();
    await stubVite.build(clientConfig);
    logger.info(`Client built in ${Date.now() - start}ms`);
  }
  await prepareManifests(ctx);
}

function isExternal(opts, id) {
  const ssrConfig = opts.viteServer.config.ssr;
  const externalOpts = {
    inline: [
      /virtual:/,
      /\.ts$/,
      ...ExternalsDefaults.inline,
      ...ssrConfig.noExternal
    ],
    external: [
      ...ssrConfig.external,
      /node_modules/
    ],
    resolve: {
      type: "module",
      extensions: [".ts", ".js", ".json", ".vue", ".mjs", ".jsx", ".tsx", ".wasm"]
    }
  };
  return isExternal$1(id, opts.viteServer.config.root, externalOpts);
}
async function transformRequest(opts, id) {
  if (id && id.startsWith("/@id/__x00__")) {
    id = "\0" + id.slice("/@id/__x00__".length);
  }
  if (id && id.startsWith("/@id/")) {
    id = id.slice("/@id/".length);
  }
  if (id && id.startsWith("/@fs/")) {
    id = id.slice("/@fs".length);
    if (id.match(/^\/\w:/)) {
      id = id.slice(1);
    }
  } else if (!id.includes("entry") && id.startsWith("/")) {
    const resolvedPath = resolve(opts.viteServer.config.root, "." + id);
    if (existsSync(resolvedPath)) {
      id = resolvedPath;
    }
  }
  const withoutVersionQuery = id.replace(/\?v=\w+$/, "");
  if (await isExternal(opts, withoutVersionQuery)) {
    const path = builtinModules.includes(withoutVersionQuery.split("node:").pop()) || !isAbsolute(withoutVersionQuery) ? withoutVersionQuery : pathToFileURL(withoutVersionQuery).href;
    return {
      code: `(global, exports, importMeta, ssrImport, ssrDynamicImport, ssrExportAll) => ${genDynamicImport(path, { wrapper: false })}.then(r => { exports.default = r.default; ssrExportAll(r) }).catch(e => { console.error(e); throw new Error(${JSON.stringify(`[vite dev] Error loading external "${id}".`)}) })`,
      deps: [],
      dynamicDeps: []
    };
  }
  const res = await opts.viteServer.transformRequest(id, { ssr: true }).catch((err) => {
    console.warn(`[SSR] Error transforming ${id}:`, err);
  }) || { code: "", map: {}, deps: [], dynamicDeps: [] };
  const code = `async function (global, __vite_ssr_exports__, __vite_ssr_import_meta__, __vite_ssr_import__, __vite_ssr_dynamic_import__, __vite_ssr_exportAll__) {
${res.code || "/* empty */"};
}`;
  return { code, deps: res.deps || [], dynamicDeps: res.dynamicDeps || [] };
}
async function transformRequestRecursive(opts, id, parent = "<entry>", chunks = {}) {
  if (chunks[id]) {
    chunks[id].parents.push(parent);
    return;
  }
  const res = await transformRequest(opts, id);
  const deps = uniq([...res.deps, ...res.dynamicDeps]);
  chunks[id] = {
    id,
    code: res.code,
    deps,
    parents: [parent]
  };
  for (const dep of deps) {
    await transformRequestRecursive(opts, dep, id, chunks);
  }
  return Object.values(chunks);
}
async function bundleRequest(opts, entryURL) {
  const chunks = await transformRequestRecursive(opts, entryURL);
  const listIds = (ids) => ids.map((id) => `// - ${id} (${hashId(id)})`).join("\n");
  const chunksCode = chunks.map((chunk) => `
// --------------------
// Request: ${chunk.id}
// Parents: 
${listIds(chunk.parents)}
// Dependencies: 
${listIds(chunk.deps)}
// --------------------
const ${hashId(chunk.id + "-" + chunk.code)} = ${chunk.code}
`).join("\n");
  const manifestCode = `const __modules__ = ${genObjectFromRawEntries(chunks.map((chunk) => [chunk.id, hashId(chunk.id + "-" + chunk.code)]))}`;
  const ssrModuleLoader = `
const __pendingModules__ = new Map()
const __pendingImports__ = new Map()
const __ssrContext__ = { global: globalThis }

function __ssrLoadModule__(url, urlStack = []) {
  const pendingModule = __pendingModules__.get(url)
  if (pendingModule) { return pendingModule }
  const modulePromise = __instantiateModule__(url, urlStack)
  __pendingModules__.set(url, modulePromise)
  modulePromise.catch(() => { __pendingModules__.delete(url) })
         .finally(() => { __pendingModules__.delete(url) })
  return modulePromise
}

async function __instantiateModule__(url, urlStack) {
  const mod = __modules__[url]
  if (mod.stubModule) { return mod.stubModule }
  const stubModule = { [Symbol.toStringTag]: 'Module' }
  Object.defineProperty(stubModule, '__esModule', { value: true })
  mod.stubModule = stubModule
  // https://vitejs.dev/guide/api-hmr.html
  const importMeta = { url, hot: { accept() {}, prune() {}, dispose() {}, invalidate() {}, decline() {}, on() {} } }
  urlStack = urlStack.concat(url)
  const isCircular = url => urlStack.includes(url)
  const pendingDeps = []
  const ssrImport = async (dep) => {
    // TODO: Handle externals if dep[0] !== '.' | '/'
    if (!isCircular(dep) && !__pendingImports__.get(dep)?.some(isCircular)) {
      pendingDeps.push(dep)
      if (pendingDeps.length === 1) {
        __pendingImports__.set(url, pendingDeps)
      }
      await __ssrLoadModule__(dep, urlStack)
      if (pendingDeps.length === 1) {
        __pendingImports__.delete(url)
      } else {
        pendingDeps.splice(pendingDeps.indexOf(dep), 1)
      }
    }
    return __modules__[dep].stubModule
  }
  function ssrDynamicImport (dep) {
    // TODO: Handle dynamic import starting with . relative to url
    return ssrImport(dep)
  }

  function ssrExportAll(sourceModule) {
    for (const key in sourceModule) {
      if (key !== 'default') {
        try {
          Object.defineProperty(stubModule, key, {
            enumerable: true,
            configurable: true,
            get() { return sourceModule[key] }
          })
        } catch (_err) { }
      }
    }
  }

  await mod(
    __ssrContext__.global,
    stubModule,
    importMeta,
    ssrImport,
    ssrDynamicImport,
    ssrExportAll
  )

  return stubModule
}
`;
  const code = [
    chunksCode,
    manifestCode,
    ssrModuleLoader,
    `export default await __ssrLoadModule__(${JSON.stringify(entryURL)})`
  ].join("\n\n");
  return {
    code,
    ids: chunks.map((i) => i.id)
  };
}

const wpfs = {
  ...fse,
  join
};

async function buildServer(ctx) {
  const _env = process.env.NODE_ENV;
  process.env.NODE_ENV = "production";
  const vuePlugin = createVuePlugin(ctx.config.vue);
  process.env.NODE_ENV = _env;
  const alias = {};
  for (const p of ctx.builder.plugins) {
    alias[p.name] = p.mode === "client" ? `defaultexport:${resolve(ctx.nuxt.options.buildDir, "empty.js")}` : `defaultexport:${p.src}`;
  }
  const serverConfig = await stubVite.mergeConfig(ctx.config, {
    base: ctx.nuxt.options.dev ? joinURL(ctx.nuxt.options.app.baseURL, ctx.nuxt.options.app.buildAssetsDir) : void 0,
    experimental: {
      renderBuiltUrl: (filename, { type, hostType }) => {
        if (hostType !== "js") {
          return { relative: true };
        }
        switch (type) {
          case "public":
            return { runtime: `__publicAssetsURL(${JSON.stringify(filename)})` };
          case "asset": {
            const relativeFilename = filename.replace(withTrailingSlash(withoutLeadingSlash(ctx.nuxt.options.app.buildAssetsDir)), "");
            return { runtime: `__buildAssetsURL(${JSON.stringify(relativeFilename)})` };
          }
        }
      }
    },
    define: {
      "process.server": true,
      "process.client": false,
      "process.static": false,
      "typeof window": '"undefined"',
      "typeof document": '"undefined"',
      "typeof navigator": '"undefined"',
      "typeof location": '"undefined"',
      "typeof XMLHttpRequest": '"undefined"'
    },
    cacheDir: resolve(ctx.nuxt.options.rootDir, "node_modules/.cache/vite/server"),
    resolve: {
      alias
    },
    ssr: {
      external: [
        "axios",
        "#internal/nitro",
        "#internal/nitro/utils"
      ],
      noExternal: [
        // TODO: Use externality for production (rollup) build
        /\/esm\/.*\.js$/,
        /\.(es|esm|esm-browser|esm-bundler).js$/,
        "#app",
        /nitropack\/(dist|src)/,
        ...ctx.nuxt.options.build.transpile.filter((i) => typeof i === "string")
      ]
    },
    build: {
      outDir: resolve(ctx.nuxt.options.buildDir, "dist/server"),
      ssr: ctx.nuxt.options.ssr ?? true,
      ssrManifest: true,
      rollupOptions: {
        external: ["#internal/nitro/utils", "#internal/nitro"],
        input: resolve(ctx.nuxt.options.buildDir, "server.js"),
        output: {
          entryFileNames: "server.mjs",
          chunkFileNames: "chunks/[name].mjs",
          generatedCode: { constBindings: true },
          format: "module"
        },
        onwarn(warning, rollupWarn) {
          if (!["UNUSED_EXTERNAL_IMPORT"].includes(warning.code)) {
            rollupWarn(warning);
          }
        }
      }
    },
    server: {
      // https://github.com/vitest-dev/vitest/issues/229#issuecomment-1002685027
      preTransformRequests: false,
      hmr: false
    },
    plugins: [
      jsxPlugin(),
      vuePlugin
    ]
  });
  await ctx.nuxt.callHook("vite:extendConfig", serverConfig, { isClient: false, isServer: true });
  const onBuild = () => ctx.nuxt.callHook("build:resources", wpfs);
  if (!ctx.nuxt.options.dev) {
    const start = Date.now();
    logger.info("Building server...");
    await stubVite.build(serverConfig);
    await onBuild();
    logger.success(`Server built in ${Date.now() - start}ms`);
    return;
  }
  if (!ctx.nuxt.options.ssr) {
    await onBuild();
    return;
  }
  const viteServer = await stubVite.createServer(serverConfig);
  ctx.ssrServer = viteServer;
  await ctx.nuxt.callHook("vite:serverCreated", viteServer, { isClient: false, isServer: true });
  ctx.nuxt.hook("close", () => viteServer.close());
  await viteServer.pluginContainer.buildStart({});
  await fse.writeFile(resolve(ctx.nuxt.options.buildDir, "dist/server/ssr-manifest.json"), JSON.stringify({}, null, 2), "utf-8");
  await generateDevSSRManifest(ctx);
  const _doBuild = async () => {
    const start = Date.now();
    const { code, ids } = await bundleRequest({ viteServer }, "/.nuxt/server.js");
    await fse.writeFile(resolve(ctx.nuxt.options.buildDir, "dist/server/server.mjs"), code, "utf-8");
    await generateDevSSRManifest(ctx, ids.filter(isCSS).map((i) => "../" + i.slice(1)));
    const time = Date.now() - start;
    logger.info(`Vite server built in ${time}ms`);
    await onBuild();
  };
  const doBuild = debounce(_doBuild);
  await _doBuild();
  viteServer.watcher.on("all", (_event, file) => {
    if (file.indexOf(ctx.nuxt.options.buildDir) === 0) {
      return;
    }
    doBuild();
  });
}

const PREFIX = "defaultexport:";
const hasPrefix = (id = "") => id.startsWith(PREFIX);
const removePrefix = (id = "") => hasPrefix(id) ? id.substr(PREFIX.length) : id;
function defaultExportPlugin() {
  return {
    name: "nuxt:default-export",
    enforce: "pre",
    resolveId(id, importer) {
      if (hasPrefix(id)) {
        return id;
      }
      if (importer && hasPrefix(importer)) {
        return this.resolve(id, removePrefix(importer));
      }
      return null;
    },
    async load(id) {
      if (!hasPrefix(id)) {
        return null;
      }
      const code = await fse.readFile(removePrefix(id), "utf8");
      const s = new MagicString(code);
      const exports = findExports(code);
      if (!exports.find((i) => i.names.includes("default"))) {
        s.append("\n\nexport default () => {}");
      }
      return {
        code: s.toString(),
        map: s.generateMap({ source: removePrefix(id), includeContent: true })
      };
    }
  };
}

function replace(replacements) {
  return {
    name: "nuxt:replace",
    transform(code) {
      Object.entries(replacements).forEach(([key, value]) => {
        const escapedKey = key.replace(/\./g, "\\.");
        code = code.replace(new RegExp(escapedKey, "g"), value);
      });
      return {
        code,
        map: null
      };
    }
  };
}

function resolveCSSOptions(nuxt) {
  const css = {
    postcss: {
      plugins: []
    }
  };
  const plugins = defu$1(nuxt.options.build.postcss.plugins, {
    // https://github.com/postcss/postcss-import
    "postcss-import": {
      resolve: createResolver({
        alias: { ...nuxt.options.alias },
        modules: [
          nuxt.options.srcDir,
          nuxt.options.rootDir,
          ...nuxt.options.modulesDir
        ]
      })
    },
    // https://github.com/postcss/postcss-url
    "postcss-url": {},
    // https://github.com/csstools/postcss-preset-env
    "postcss-preset-env": nuxt.options.build.postcss.preset || {}
  });
  for (const name in plugins) {
    const opts = plugins[name];
    if (!opts) {
      continue;
    }
    const plugin = nuxt.resolver.requireModule(name);
    css.postcss.plugins.push(plugin(opts));
  }
  return css;
}

async function bundle(nuxt, builder) {
  for (const p of builder.plugins) {
    p.src = nuxt.resolver.resolvePath(resolve(nuxt.options.buildDir, p.src));
  }
  const ctx = {
    nuxt,
    builder,
    config: await stubVite.mergeConfig(
      {
        // defaults from packages/schema/src/config/vite
        root: nuxt.options.srcDir,
        mode: nuxt.options.dev ? "development" : "production",
        logLevel: "warn",
        publicDir: resolve(nuxt.options.rootDir, nuxt.options.srcDir, nuxt.options.dir.static),
        vue: {
          isProduction: !nuxt.options.dev,
          template: {
            compilerOptions: nuxt.options.vue.compilerOptions
          }
        },
        esbuild: {
          jsxFactory: "h",
          jsxFragment: "Fragment",
          tsconfigRaw: "{}"
        },
        clearScreen: false,
        define: {
          "process.dev": nuxt.options.dev,
          "process.static": nuxt.options.target === "static",
          "process.env.NODE_ENV": JSON.stringify(nuxt.options.dev ? "development" : "production"),
          "process.mode": JSON.stringify(nuxt.options.dev ? "development" : "production"),
          "process.target": JSON.stringify(nuxt.options.target)
        },
        resolve: {
          extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".vue"],
          alias: {
            ...nuxt.options.alias,
            "#build": nuxt.options.buildDir,
            ".nuxt": nuxt.options.buildDir,
            "/entry.mjs": resolve(nuxt.options.buildDir, "client.js"),
            "web-streams-polyfill/ponyfill/es2018": resolve(distDir, "runtime/vite/mock/web-streams-polyfill.mjs"),
            "whatwg-url": resolve(distDir, "runtime/vite/mock/whatwg-url.mjs"),
            // Cannot destructure property 'AbortController' of ..
            "abort-controller": resolve(distDir, "runtime/vite/mock/abort-controller.mjs")
          }
        },
        optimizeDeps: {
          exclude: [
            "ufo",
            "date-fns",
            "nanoid",
            "vue"
            // TODO(Anthony): waiting for Vite's fix https://github.com/vitejs/vite/issues/5688
            // ...nuxt.options.build.transpile.filter(i => typeof i === 'string'),
            // 'vue-demi'
          ]
        },
        css: resolveCSSOptions(nuxt),
        build: {
          assetsDir: withoutLeadingSlash(nuxt.options.app.buildAssetsDir),
          emptyOutDir: false,
          rollupOptions: {
            output: { sanitizeFileName: sanitizeFilePath }
          }
        },
        plugins: [
          replace({
            __webpack_public_path__: "globalThis.__webpack_public_path__"
          }),
          jsxPlugin(),
          defaultExportPlugin()
        ],
        server: {
          watch: {
            ignored: isIgnored
          },
          fs: {
            strict: true,
            allow: [
              pkgDir,
              nuxt.options.buildDir,
              nuxt.options.srcDir,
              nuxt.options.rootDir,
              ...nuxt.options.modulesDir
            ]
          }
        }
      },
      nuxt.options.vite
    )
  };
  if (!nuxt.options.dev) {
    ctx.config.server.watch = void 0;
    ctx.config.build.watch = void 0;
  }
  await ctx.nuxt.callHook("vite:extend", ctx);
  if (nuxt.options.dev) {
    ctx.nuxt.hook("vite:serverCreated", (server) => {
      const start = Date.now();
      warmupViteServer(server, ["/.nuxt/entry.mjs"]).then(() => {
        logger.info(`Vite warmed up in ${Date.now() - start}ms`);
      }).catch(logger.error);
    });
  }
  await buildClient(ctx);
  await buildServer(ctx);
}
class ViteBuilder {
  constructor(builder) {
    this.builder = builder;
    this.nuxt = builder.nuxt;
  }
  build() {
    return bundle(this.nuxt, this.builder);
  }
}

export { ViteBuilder };
