import { ref } from 'vue';
export { computed, customRef, del, effectScope, getCurrentInstance, getCurrentScope, h, inject, isReactive, isReadonly, isRef, markRaw, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onScopeDispose, onServerPrefetch, onUnmounted, onUpdated, provide, reactive, readonly, set, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, useAttrs, useCssModule, useCssModule as useCSSModule, useSlots, version, watch, watchEffect, watchPostEffect, watchSyncEffect } from 'vue';
export { ref };
export declare const createApp: () => () => never;
export declare const createRef: () => () => never;
export declare const defineAsyncComponent: () => () => never;
export declare const isRaw: () => () => never;
export declare const proxyRefs: () => () => never;
export declare const warn: () => () => never;
export declare const defineNuxtMiddleware: () => never;
export declare const defineNuxtPlugin: () => never;
export declare const setMetaPlugin: () => never;
export declare const setSSRContext: () => never;
export declare const globalPlugin: () => never;
export declare const withContext: () => never;
export declare const useStatic: () => never;
export declare const reqRef: () => never;
export declare const reqSsrRef: () => never;
export declare const ssrRef: (value: any, key: any) => import("vue").Ref<unknown>;
export declare const shallowSsrRef: (value: any, key: any) => import("vue").Ref<unknown>;
export declare const ssrPromise: (value: any, key: any) => Promise<any>;
export declare const onGlobalSetup: (fn: any) => void;
export declare const useAsync: (cb: any, key: any) => import("vue").Ref<unknown>;
export declare const useContext: () => {
    route: import("vue").ComputedRef<import("vue-router").Route>;
    query: import("vue").ComputedRef<any>;
    from: import("vue").ComputedRef<any>;
    params: import("vue").ComputedRef<any>;
    $data: Record<string, any>;
    $props: Record<string, any>;
    $parent: import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>> | null;
    $root: import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>;
    $children: import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>[];
    $options: import("vue").ComponentOptions<import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>, import("vue/types/options").DefaultData<import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>>, import("vue/types/options").DefaultMethods<import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>>, import("vue/types/options").DefaultComputed, import("vue/types/options").PropsDefinition<import("vue/types/options").DefaultProps>, import("vue/types/options").DefaultProps, {}, import("vue/types/v3-component-options").ComponentOptionsMixin, import("vue/types/v3-component-options").ComponentOptionsMixin>;
    $emit: (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>;
    $el: Element;
    $refs: {
        [key: string]: Element | import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>> | (Element | import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>)[] | undefined;
    };
    $slots: {
        [key: string]: import("vue").VNode[] | undefined;
    };
    $scopedSlots: {
        [key: string]: import("vue/types/vnode").NormalizedScopedSlot | undefined;
    };
    $isServer: boolean;
    $ssrContext: any;
    $vnode: import("vue").VNode;
    $attrs: Record<string, string>;
    $listeners: Record<string, Function | Function[]>;
    $mount(elementOrSelector?: string | Element | undefined, hydrating?: boolean | undefined): import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>;
    $forceUpdate(): void;
    $destroy(): void;
    $set: {
        <T>(object: object, key: string | number, value: T): T;
        <T_1>(array: T_1[], key: number, value: T_1): T_1;
    };
    $delete: {
        (object: object, key: string | number): void;
        <T_2>(array: T_2[], key: number): void;
    };
    $watch(expOrFn: string, callback: (this: import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>, n: any, o: any) => void, options?: import("vue").WatchOptions | undefined): () => void;
    $watch<T_3>(expOrFn: (this: import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>) => T_3, callback: (this: import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>, n: T_3, o: T_3) => void, options?: import("vue").WatchOptions | undefined): () => void;
    $on(event: string | string[], callback: Function): import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>;
    $once(event: string | string[], callback: Function): import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>;
    $off(event?: string | string[] | undefined, callback?: Function | undefined): import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>;
    $nextTick: typeof import("vue").nextTick;
    $createElement: import("vue").CreateElement;
    $meta(): import("vue-meta").VueMetaPlugin;
    $router: import("vue-router").default;
    $route: import("vue-router").Route;
};
export declare const defineComponent: (options: any) => any;
export declare const useMeta: (init: any) => any;
export declare const wrapProperty: (property: any, makeComputed?: boolean) => () => any;
export declare const useRouter: () => import("vue-router").default;
export declare const useRoute: () => import("vue-router").Route;
export declare const useStore: () => any;
export declare const useFetch: (callback: any) => {
    fetch: any;
    fetchState: any;
};
